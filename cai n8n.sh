#!/bin/bash

#------------------------------------------------------------------
# K·ªäCH B·∫¢N C√ÄI ƒê·∫∂T T·ª∞ ƒê·ªòNG HO√ÄN THI·ªÜN
# T√°c gi·∫£: Ticmiro & Gemini
# Ch·ª©c nƒÉng:
# - C√†i ƒë·∫∑t n8n v·ªõi PostgreSQL tr√™n m·ªôt VPS tr·ªëng.
# - T·ª± ƒë·ªông h√≥a c√†i ƒë·∫∑t Docker, Reverse Proxy v√† HTTPS v·ªõi Caddy.
#------------------------------------------------------------------

# --- Ti·ªán √≠ch ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# D·ª´ng l·∫°i ngay l·∫≠p t·ª©c n·∫øu c√≥ l·ªói
set -e

echo -e "${GREEN}Ch√†o m·ª´ng ƒë·∫øn v·ªõi k·ªãch b·∫£n c√†i ƒë·∫∑t t·ª± ƒë·ªông n8n!${NC}"
echo -e "${GREEN}T√°c gi·∫£: Ticmiro & Gemini${NC}"
echo "------------------------------------------------------------------"

# --- B∆Ø·ªöC 1: H·ªéI TH√îNG TIN NG∆Ø·ªúI D√ôNG ---
echo -e "${YELLOW}Vui l√≤ng cung c·∫•p c√°c th√¥ng tin c·∫•u h√¨nh c·∫ßn thi·∫øt:${NC}"

read -p "Nh·∫≠p t√™n mi·ªÅn b·∫°n s·∫Ω s·ª≠ d·ª•ng cho n8n (v√≠ d·ª•: n8n.yourdomain.com): " DOMAIN_NAME
read -p "Nh·∫≠p email c·ªßa b·∫°n (d√πng cho th√¥ng b√°o gia h·∫°n SSL): " EMAIL_ADDRESS
read -p "Nh·∫≠p t√™n cho PostgreSQL User (v√≠ d·ª•: n8n_user): " POSTGRES_USER
read -s -p "Nh·∫≠p m·∫≠t kh·∫©u cho PostgreSQL User: " POSTGRES_PASSWORD
echo
read -p "Nh·∫≠p t√™n cho PostgreSQL Database (v√≠ d·ª•: n8n_db): " POSTGRES_DB

if [ -z "$DOMAIN_NAME" ] || [ -z "$EMAIL_ADDRESS" ] || [ -z "$POSTGRES_USER" ] || [ -z "$POSTGRES_PASSWORD" ] || [ -z "$POSTGRES_DB" ]; then
  echo -e "${RED}L·ªói: T·∫•t c·∫£ c√°c tr∆∞·ªùng th√¥ng tin kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.${NC}"
  exit 1
fi

echo ""
echo "--- C·∫•u h√¨nh s·∫Ω ƒë∆∞·ª£c c√†i ƒë·∫∑t cho t√™n mi·ªÅn: $DOMAIN_NAME ---"
echo ""

# --- B∆Ø·ªöC 2: C√ÄI ƒê·∫∂T C√ÅC G√ìI H·ªÜ TH·ªêNG C·∫¶N THI·∫æT ---
echo -e "${YELLOW}--> C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i c∆° b·∫£n...${NC}"
sudo apt-get update
sudo apt-get install -y ca-certificates curl git

# --- B∆Ø·ªöC 3: KI·ªÇM TRA V√Ä C√ÄI ƒê·∫∂T DOCKER ---
if ! command -v docker &> /dev/null
then
    echo -e "${YELLOW}--> Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Docker...${NC}"
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    echo -e "${GREEN}--> C√†i ƒë·∫∑t Docker ho√†n t·∫•t.${NC}"
else
    echo -e "${GREEN}--> Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua b∆∞·ªõc n√†y.${NC}"
fi

# --- B∆Ø·ªöC 4: C·∫§U H√åNH T∆Ø·ªúNG L·ª¨A (UFW) ---
echo -e "${YELLOW}--> C·∫•u h√¨nh t∆∞·ªùng l·ª≠a UFW...${NC}"
sudo ufw allow ssh       # Cho ph√©p k·∫øt n·ªëi SSH (c·ªïng 22)
sudo ufw allow 80/tcp    # Cho ph√©p HTTP cho Caddy
sudo ufw allow 443/tcp   # Cho ph√©p HTTPS cho Caddy
sudo ufw --force enable  # B·∫≠t t∆∞·ªùng l·ª≠a m√† kh√¥ng c·∫ßn h·ªèi

# --- B∆Ø·ªöC 5: T·∫†O FILE C·∫§U H√åNH V√Ä TRI·ªÇN KHAI DOCKER ---
INSTALL_DIR="$HOME/n8n-caddy-stack"
echo -e "${YELLOW}--> T·∫°o c√°c file c·∫•u h√¨nh t·∫°i ${INSTALL_DIR}...${NC}"

mkdir -p "$INSTALL_DIR"
cd "$INSTALL_DIR"

# T·∫°o file .env
cat > .env << EOF
# Th√¥ng tin ƒëƒÉng nh·∫≠p cho PostgreSQL
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_DB=${POSTGRES_DB}
EOF

# T·∫°o file Caddyfile
cat > Caddyfile << EOF
${DOMAIN_NAME} {
    reverse_proxy n8n:5678
}
EOF

# T·∫°o file docker-compose.yml
cat > docker-compose.yml << EOF
version: '3.7'

services:
  caddy:
    image: caddy:latest
    container_name: caddy_reverse_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

  postgres:
    image: postgres:15
    container_name: n8n_postgres_db
    restart: always
    environment:
      - POSTGRES_USER=\${POSTGRES_USER}
      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
      - POSTGRES_DB=\${POSTGRES_DB}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \${POSTGRES_USER} -d \${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: n8nio/n8n
    container_name: n8n_service
    restart: always
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=\${POSTGRES_DB}
      - DB_POSTGRESDB_USER=\${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=\${POSTGRES_PASSWORD}
      - N8N_HOST=${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${DOMAIN_NAME}/
    volumes:
      - ./n8n-data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  caddy_data:
  caddy_config:
  postgres-data:
  n8n-data:
EOF

echo -e "${YELLOW}--> Kh·ªüi ch·∫°y c√°c d·ªãch v·ª• (Caddy, n8n, PostgreSQL)...${NC}"
sudo docker compose up -d

# --- B∆Ø·ªöC 6: HO√ÄN T·∫§T ---
echo "=================================================================="
echo -e "${GREEN}üöÄ C√ÄI ƒê·∫∂T HO√ÄN T·∫§T! üöÄ${NC}"
echo "=================================================================="
echo ""
echo "Caddy s·∫Ω t·ª± ƒë·ªông l·∫•y v√† c·∫•u h√¨nh SSL cho b·∫°n trong v√†i ph√∫t t·ªõi."
echo "B·∫°n c√≥ th·ªÉ truy c·∫≠p n8n ngay b√¢y gi·ªù t·∫°i: ${GREEN}https://${DOMAIN_NAME}${NC}"
echo "Th√¥ng tin database c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u trong file: ${GREEN}${INSTALL_DIR}/.env${NC}"
echo ""
echo "ƒê·ªÉ xem log c·ªßa h·ªá th·ªëng, ch·∫°y l·ªánh: ${YELLOW}cd ${INSTALL_DIR} && sudo docker compose logs -f${NC}"
echo "=================================================================="
