#!/bin/bash

#------------------------------------------------------------------
# K·ªäCH B·∫¢N C√ÄI ƒê·∫∂T T·ª∞ ƒê·ªòNG HO√ÄN CH·ªàNH (v5.1 - ƒê√£ th√™m Volume cho n8n)
# T√°c gi·∫£: Ticmiro & Gemini
# Ch·ª©c nƒÉng:
# - C√†i ƒë·∫∑t Docker Compose v2 (plugin, c√≥ d·∫•u c√°ch) ƒë·ªÉ
#   kh·∫Øc ph·ª•c tri·ªát ƒë·ªÉ l·ªói 'KeyError: ContainerConfig'.
# - (M·ªöI) √Ånh x·∫° 'public_media' v√†o c·∫£ Caddy (ƒë·ªÉ public)
#   v√† n8n (ƒë·ªÉ node 'Write File' c√≥ th·ªÉ truy c·∫≠p).
# - T·ª± ƒë·ªông t·∫°o v√† l∆∞u N8N_ENCRYPTION_KEY.
# - C√†i ƒë·∫∑t n8n, PostgreSQL, Caddy (Reverse Proxy & SSL).
# - M·ªü c·ªïng PostgreSQL 5432 cho k·∫øt n·ªëi b√™n ngo√†i.
#------------------------------------------------------------------

# --- Ti·ªán √≠ch ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# D·ª´ng l·∫°i ngay l·∫≠p t·ª©c n·∫øu c√≥ b·∫•t k·ª≥ l·ªánh n√†o th·∫•t b·∫°i
set -e

echo -e "${GREEN}Ch√†o m·ª´ng ƒë·∫øn v·ªõi k·ªãch b·∫£n c√†i ƒë·∫∑t ho√†n ch·ªânh cho n8n! (Phi√™n b·∫£n v5.1)${NC}"
echo -e "${GREEN}T√°c gi·∫£: Ticmiro & Gemini${NC}"
echo "------------------------------------------------------------------"

# --- B∆Ø·ªöC 1: H·ªéI TH√îNG TIN NG∆Ø·ªúI D√ôNG ---
echo -e "${YELLOW}Vui l√≤ng cung c·∫•p c√°c th√¥ng tin c·∫•u h√¨nh c·∫ßn thi·∫øt:${NC}"

read -p "Nh·∫≠p t√™n mi·ªÅn b·∫°n s·∫Ω s·ª≠ d·ª•ng cho n8n (v√≠ d·ª•: n8n.yourdomain.com): " DOMAIN_NAME
read -p "Nh·∫≠p email c·ªßa b·∫°n (d√πng cho th√¥ng b√°o gia h·∫°n SSL): " EMAIL_ADDRESS
read -p "Nh·∫≠p t√™n cho PostgreSQL User (v√≠ d·ª•: n8n_user): " POSTGRES_USER
read -s -p "Nh·∫≠p m·∫≠t kh·∫©u M·∫†NH cho PostgreSQL User: " POSTGRES_PASSWORD
echo
read -p "Nh·∫≠p t√™n cho PostgreSQL Database (v√≠ d·ª•: n8n_db): " POSTGRES_DB

if [ -z "$DOMAIN_NAME" ] || [ -z "$EMAIL_ADDRESS" ] || [ -z "$POSTGRES_USER" ] || [ -z "$POSTGRES_PASSWORD" ] || [ -z "$POSTGRES_DB" ]; then
  echo -e "${RED}L·ªói: T·∫•t c·∫£ c√°c tr∆∞·ªùng th√¥ng tin kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.${NC}"
  exit 1
fi

echo ""
echo "--- C·∫•u h√¨nh s·∫Ω ƒë∆∞·ª£c c√†i ƒë·∫∑t cho t√™n mi·ªÅn: $DOMAIN_NAME ---"
echo ""

# --- B∆Ø·ªöC 2: C√ÄI ƒê·∫∂T C√ÅC G√ìI H·ªÜ TH·ªêNG C·∫¶N THI·∫æT ---
echo -e "${YELLOW}--> C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i c∆° b·∫£n...${NC}"
sudo apt-get update
sudo apt-get install -y ca-certificates curl git openssl

# --- B∆Ø·ªöC 3: KI·ªÇM TRA V√Ä C√ÄI ƒê·∫∂T DOCKER ---
if ! command -v docker &> /dev/null
then
    echo -e "${YELLOW}--> Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Docker...${NC}"
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    
    # Ch·ªâ c√†i ƒë·∫∑t Docker engine
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin
    
    echo -e "${GREEN}--> C√†i ƒë·∫∑t Docker Engine ho√†n t·∫•t.${NC}"
else
    echo -e "${GREEN}--> Docker Engine ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua b∆∞·ªõc n√†y.${NC}"
fi

# --- B∆Ø·ªöC 4: C√ÄI ƒê·∫∂T DOCKER COMPOSE v2 (PLUGIN) ---
echo -e "${YELLOW}--> C√†i ƒë·∫∑t Docker Compose v2 (plugin, c√≥ d·∫•u c√°ch)...${NC}"
if ! docker compose version &> /dev/null
then
    echo -e "${YELLOW}--> Docker Compose v2 ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t th·ªß c√¥ng...${NC}"
    LATEST_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    if [ -z "$LATEST_COMPOSE_VERSION" ]; then
        echo -e "${RED}L·ªói: Kh√¥ng th·ªÉ t√¨m th·∫•y phi√™n b·∫£n Docker Compose m·ªõi nh·∫•t. S·ª≠ d·ª•ng phi√™n b·∫£n ·ªïn ƒë·ªãnh m·∫∑c ƒë·ªãnh.${NC}"
        LATEST_COMPOSE_VERSION="v2.27.1"
    fi
    echo "Phi√™n b·∫£n Docker Compose m·ªõi nh·∫•t l√†: $LATEST_COMPOSE_VERSION"

    DOCKER_COMPOSE_DEST="/usr/libexec/docker/cli-plugins"
    sudo mkdir -p $DOCKER_COMPOSE_DEST
    sudo curl -L "https://github.com/docker/compose/releases/download/${LATEST_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o $DOCKER_COMPOSE_DEST/docker-compose
    sudo chmod +x $DOCKER_COMPOSE_DEST/docker-compose
    
    if ! docker compose version &> /dev/null
    then
        echo -e "${RED}L·ªñI: C√†i ƒë·∫∑t Docker Compose v2 th·∫•t b·∫°i.${NC}"
        exit 1
    else
        echo -e "${GREEN}--> C√†i ƒë·∫∑t Docker Compose v2 th√†nh c√¥ng.${NC}"
    fi
else
    echo -e "${GREEN}--> Docker Compose v2 ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua b∆∞·ªõc n√†y.${NC}"
    docker compose version
fi


# --- B∆Ø·ªöC 5: C·∫§U H√åNH DOCKER V√Ä T∆Ø·ªúNG L·ª¨A ---
echo -e "${YELLOW}--> C·∫•u h√¨nh Docker ƒë·ªÉ ∆∞u ti√™n IPv4...${NC}"
sudo cat > /etc/docker/daemon.json << EOF
{
  "ipv6": false
}
EOF
sudo systemctl restart docker

echo -e "${YELLOW}--> C·∫•u h√¨nh t∆∞·ªùng l·ª≠a UFW...${NC}"
sudo ufw allow ssh
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp

echo -e "${RED}==================================================================${NC}"
echo -e "${RED}C·∫¢NH B√ÅO B·∫¢O M·∫¨T: M·ªü c·ªïng 5432 (PostgreSQL) ra Internet.${NC}"
echo -e "${YELLOW}H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ S·ª¨ D·ª§NG M·∫¨T KH·∫®U R·∫§T M·∫†NH cho database.${NC}"
echo -e "${RED}==================================================================${NC}"
sudo ufw allow 5432/tcp

sudo ufw --force enable

# --- B∆Ø·ªöC 6: T·∫†O FILE C·∫§U H√åNH V√Ä TRI·ªÇN KHAI DOCKER ---
INSTALL_DIR="$HOME/n8n-caddy-stack"
echo -e "${YELLOW}--> T·∫°o c√°c file c·∫•u h√¨nh t·∫°i ${INSTALL_DIR}...${NC}"

mkdir -p "$INSTALL_DIR"
mkdir -p "$INSTALL_DIR/public_media"
echo -e "${GREEN}--> ƒê√£ t·∫°o th∆∞ m·ª•c media t·∫°i ${INSTALL_DIR}/public_media${NC}"

cd "$INSTALL_DIR"

echo -e "${YELLOW}--> ƒêang t·∫°o N8N_ENCRYPTION_KEY...${NC}"
ENCRYPTION_KEY=$(openssl rand -hex 32)
if [ -z "$ENCRYPTION_KEY" ]; then
    echo -e "${RED}L·ªói: Kh√¥ng th·ªÉ t·∫°o ENCRYPTION_KEY.${NC}"
    exit 1
fi
echo -e "${GREEN}ƒê√£ t·∫°o Key m√£ h√≥a th√†nh c√¥ng.${NC}"

# T·∫°o file .env
cat > .env << EOF
# Th√¥ng tin ƒëƒÉng nh·∫≠p cho PostgreSQL
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_DB=${POSTGRES_DB}

# M√∫i gi·ªù cho n8n
TZ=Asia/Ho_Chi_Minh

# Kh√≥a m√£ h√≥a cho credentials (ƒê√£ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông)
N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
EOF

# T·∫°o file Caddyfile
cat > Caddyfile << EOF
${DOMAIN_NAME} {
    handle_path /public/* {
        root * /var/www/public
        file_server
    }
    handle {
        reverse_proxy n8n:5678
    }
}
EOF

# T·∫°o file docker-compose.yml
# (THAY ƒê·ªîI: Th√™m volume 'public_media' v√†o d·ªãch v·ª• 'n8n')
cat > docker-compose.yml << EOF
version: '3.7'

services:
  caddy:
    image: caddy:latest
    container_name: caddy_reverse_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      # √Ånh x·∫° v√†o Caddy ƒë·ªÉ public
      - ./public_media:/var/www/public
    networks:
      - n8n_network

  postgres:
    image: postgres:15
    container_name: n8n_postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=\${POSTGRES_USER}
      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
      - POSTGRES_DB=\${POSTGRES_DB}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \${POSTGRES_USER} -d \${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - n8n_network

  n8n:
    # B·∫°n c√≥ th·ªÉ ƒë·ªïi 'latest' th√†nh phi√™n b·∫£n c·ª• th·ªÉ n·∫øu mu·ªën, v√≠ d·ª•: n8nio/n8n:1.45.1
    image: n8nio/n8n:latest
    container_name: n8n_service
    restart: always
    user: "root"
    ports:
      - "127.0.0.1:5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=\${POSTGRES_DB}
      - DB_POSTGRESDB_USER=\${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=\${POSTGRES_PASSWORD}
      - N8N_HOST=${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${DOMAIN_NAME}/
      - TZ=\${TZ}
      - N8N_ENCRYPTION_KEY=\${N8N_ENCRYPTION_KEY}
      # Th√™m c√°c g√≥i node m·ªü r·ªông n·∫øu c·∫ßn, v√≠ d·ª•:
      # - NODES_INCLUDE=@n8n/n8n-nodes-langchain
    volumes:
      - ./n8n-data:/home/node/.n8n
      # --- ƒê√É TH√äM: √Ånh x·∫° v√†o n8n ƒë·ªÉ ghi file ---
      - ./public_media:/home/node/public_media
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - n8n_network

networks:
  n8n_network:
    driver: bridge

volumes:
  caddy_data: {}
  caddy_config: {}
  postgres-data: {}
  n8n-data: {}
EOF

echo -e "${YELLOW}--> Kh·ªüi ch·∫°y c√°c d·ªãch v·ª• (Caddy, n8n, PostgreSQL)...${NC}"
echo "B∆∞·ªõc n√†y s·∫Ω t·ª± ƒë·ªông t·∫£i image v·ªÅ, c√≥ th·ªÉ m·∫•t v√†i ph√∫t."
sudo docker compose up -d

# --- B∆Ø·ªöC 7: HO√ÄN T·∫§T ---
echo "=================================================================="
echo -e "${GREEN}üöÄ C√ÄI ƒê·∫∂T HO√ÄN T·∫§T! üöÄ${NC}"
echo "=================================================================="
echo ""
echo "B·∫°n c√≥ th·ªÉ truy c·∫≠p n8n ngay b√¢y gi·ªù t·∫°i: ${GREEN}https://${DOMAIN_NAME}${NC}"
echo -e "Kh√≥a m√£ h√≥a (N8N_ENCRYPTION_KEY) ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u t·∫°i: ${GREEN}${INSTALL_DIR}/.env${NC}"
echo ""
echo -e "${YELLOW}--- MEDIA C√îNG KHAI ---${NC}"
echo "ƒê·ªÉ L∆ØU file t·ª´ n8n, h√£y d√πng ƒë∆∞·ªùng d·∫´n: ${GREEN}/home/node/public_media/ten_file.png${NC}"
echo "ƒê·ªÉ TRUY C·∫¨P file qua web, h√£y d√πng URL: ${GREEN}https://${DOMAIN_NAME}/public/ten_file.png${NC}"
echo ""
echo -e "${RED}--- TH√îNG TIN & C·∫¢NH B√ÅO DATABASE ---${NC}"
echo "Database PostgreSQL c·ªßa b·∫°n hi·ªán ƒëang m·ªü ra Internet qua c·ªïng 5432."
echo "Host: ${GREEN}${DOMAIN_NAME}${NC} (ho·∫∑c IP c·ªßa VPS)"
echo "Port: ${GREEN}5432${NC}"
echo "User: ${GREEN}${POSTGRES_USER}${NC}"
echo "Database: ${GREEN}${POSTGRES_DB}${NC}"
echo ""
echo "ƒê·ªÉ xem log c·ªßa h·ªá th·ªëng, ch·∫°y l·ªánh: ${YELLOW}cd ${INSTALL_DIR} && sudo docker compose logs -f${NC}"
echo "=================================================================="